plugins {
    id 'fabric-loom' version '1.11-SNAPSHOT'
    id 'maven-publish'
    id "io.freefair.lombok" version "8.10"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

apply from: 'https://raw.githubusercontent.com/Scrupyy/GradleScripts/main/gradle/publish.gradle'

repositories {
    mavenCentral()
    maven { url 'https://masa.dy.fi/maven' }
    maven { url 'https://jitpack.io' }
    maven {
        url = uri("https://maven.pkg.github.com/Scrupyy/AdvancedChatCore")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    modImplementation("com.github.sakura-ryoko:malilib:1.21.8-0.25.5")
    modImplementation "com.scrupy:advancedchatcore:1.21.8-1.5.11"
    modImplementation 'com.github.DarkKronicle.Konstruct:core:2.0.3-build1'

	implementation 'org.openjdk.nashorn:nashorn-core:15.3'
	implementation 'org.javadelight:delight-nashorn-sandbox:0.2.5'

	//include 'org.openjdk.nashorn:nashorn-core:15.3'
	//include 'org.javadelight:delight-nashorn-sandbox:0.2.5'
	//include group: 'org.webjars.bower', name: 'js-beautify', version: '1.9.0'
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 21
}

tasks.named('remapJar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

jar {
    from "LICENSE.txt"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
